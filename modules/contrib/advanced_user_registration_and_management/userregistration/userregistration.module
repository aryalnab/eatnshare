<?php

/**
 * @file
 * Enables the use of personal and site-wide contact forms.
 */

use Drupal\Core\Form\FormStateInterface;
use Drupal\Core\Url;
use Symfony\Component\HttpFoundation\RedirectResponse;
use Drupal\Core\Entity\EntityTypeInterface;
use LoginRadiusSDK\LoginRadius;
use \LoginRadiusSDK\CustomerRegistration\AccountAPI;
use \LoginRadiusSDK\CustomerRegistration\UserAPI;
use \LoginRadiusSDK\LoginRadiusException;

module_load_include('php', 'sociallogin', 'customhttpclient');
global $apiClient_class;
$apiClient_class = 'CustomHttpClient';


function userregistration_theme() {
  $path = drupal_get_path('module', 'userregistration') . '/theme';
  $theme =  array(
      'user_login_form' => array(
      'template' => 'user_login_form',
      'render element' => 'form',
      'path' => $path,
    ),
      'change_password' => array(
      'variables' => array(
        'params' => NULL,
      ), 
      'template' => 'change_password',
      'path' => $path,
    ),
        'user_pass' => array(
      'template' => 'user_pass',
      'render element' => 'form',
      'path' => $path,

    ),
      'raas_social_widget_container' => array(
      'variables' => array(
        'params' => NULL,
      ),
      'template' => 'raas_social_widget_container',
      'path' => $path,
    ),
    'lr_raas_linked' => array(
      'variables' => array(
        'params' => NULL,
      ),
      'template' => 'lr_raas_linked',
      'path' => $path,
    ),
    'lr_admin_login' => array(
      'template' => 'lr_admin_login',
      'render element' => 'form',
      'path' => $path,
    ),
    'lr_raas_popup' => array(     
      'variables' => array(
        'params' => NULL,
      ),
      'template' => 'lr_raas_popup',
      'path' => $path,
    ),
    'lr_loading' => array(
      'template' => 'lr_loading',
      'variables' => array(
        'params' => NULL,
      ),
      'path' => $path,
    ),
    'lr_message' => array(
      'template' => 'lr_message',
      'variables' => array(
        'params' => NULL,
      ),
      'path' => $path,
    ),  
  );

  $theme['user_register_form'] = array(
    'template' => 'user_register_form',
    'render element' => 'form',
    'path' => $path,
  );

   return $theme;
}

function mapAccount($user_id, $provider_id, $provider) { 
$connection = \Drupal\Core\Database\Database::getConnection();
    
     $raas_uid = $connection->query("SELECT am.lr_raas_uid FROM {users} am WHERE  am.uid = :uid", array(
        ':uid' => $_SESSION['_sf2_attributes']['uid'],
      ))
        ->fetchField();  
    $config = \Drupal::config('sociallogin.settings');
    $apiKey = trim($config->get('api_key'));
    $apiSecret = trim($config->get('api_secret'));
   
    try {
       $accountObj = new AccountAPI($apiKey, $apiSecret, array('output_format' => 'json'));
      $result = $accountObj->accountLink($raas_uid, $provider_id, $provider);   
    }
    catch (LoginRadiusException $e) {   
       if (isset($e->getErrorResponse()->description) && $e->getErrorResponse()->description) {
         $result = $e->getMessage();         
        }
      }

    if (isset($result->isPosted) && $result->isPosted) {
      
    $connection->insert('loginradius_mapusers')
      ->fields(array(
        'user_id' => $user_id,
        'provider' => $provider,
        'provider_id' => $provider_id,
      ))
      ->execute();
    }
    return $result;
  }

/**
 * Handle Linking functionality.
 *
 * @param $userprofile
 * @param $account
 */
function userregistration_add_user_identities_submit($userprofile) {
$connection = \Drupal\Core\Database\Database::getConnection();
  $provider_id_exist = $connection->query("SELECT am.uid FROM {users} am INNER JOIN {loginradius_mapusers} sm ON am.uid = sm.user_id WHERE  sm.provider_id = :provider_id", array(
        ':provider_id' => $userprofile->ID,
      ))
        ->fetchField();
  
  
     $user = \Drupal::currentUser();
      if (empty($provider_id_exist) && !$provider_id_exist) {     
       
       $result = mapAccount($user->id(), $userprofile->ID, $userprofile->Provider);
          if (isset($result->isPosted) && $result->isPosted) {
          drupal_set_message(t("Your account successfully mapped with this account."));          
          } else {            
              $msg = isset($result) ? $result : 'We are unable to link this account.';
              drupal_set_message(t($msg), 'error');
          }
      }
      else {     
        drupal_set_message(t("This account is already linked with an account. try to choose another account."), 'warning');
      }

    return new RedirectResponse(Url::fromRoute('user.page')->toString());
     
}
/**
 * Added Required variable to use in template fie.
 *
 * @param $vars
 */
function template_preprocess_lr_raas_linked(&$vars) {
  global $base_url;

  $vars['currentid'] = $_SESSION['_sf2_attributes']['lrID']; 
  $vars['image_url'] = $base_url . '/' . drupal_get_path('module', 'userregistration') . '/images';
  $vars['callback'] = userregistration_get_callback_url();  
}

function template_preprocess_user_pass(&$variables) {
   $config = \Drupal::config('sociallogin.settings');
   $variables['api_key'] =  trim($config->get('api_key'));
}

function template_preprocess_user_register_form(&$variables) {  
  $variables['admin_access'] =  true;
  $user = \Drupal::currentUser()->getRoles();
      if (in_array("administrator", $user)) {
        $variables['admin_access'] =  false;
      }
   $config = \Drupal::config('sociallogin.settings');
   $variables['interface_label'] = $config->get('interface_label');
   $variables['api_key'] =  trim($config->get('api_key'));
   $variables['rendered'] = drupal_render_children($variables['form']);
}

function template_preprocess_lr_raas_popup(&$variables) {
  $config = \Drupal::config('sociallogin.settings'); 
  $variables['popup_title'] = $config->get('popup_title');
}
  
function userregistration_preprocess(&$variables) {
  $variables['image_path'] = $GLOBALS['base_url'] . '/' . drupal_get_path('module', 'userregistration') . '/images/loading.gif';
}

function userregistration_block_view_alter(&$data, $block) {
    if(isset($_GET['vtype']) && $_GET['vtype'] == 'emailverification'){     
          drupal_set_message(t('<ul><li class="messageinfo"></li><div class="clear"></div></ul><div id="resetpassword-container" style="display: none"></div>'));
    }  
}
  
function template_preprocess_user_login_form(&$variables) {
  $config = \Drupal::config('sociallogin.settings');
  $variables['interface_label'] = $config->get('interface_label');
  $variables['api_key'] =  trim($config->get('api_key'));
}

function userregistration_add_loginradius_userdata($userprofile, $token){      
    $_SESSION['provider'] = $userprofile->Provider;   
 
}

function userregistration_page_attachments(&$page) {
  
    $user = \Drupal::currentUser();  
    $emailVerificationUrl = Url::fromRoute('<front>')->setAbsolute()->toString();
    $forgotVerificationUrl = Url::fromRoute('user.login')->setAbsolute()->toString();
    $config = \Drupal::config('sociallogin.settings');
    $sso_config = \Drupal::config('sso.settings');
    $sso_secure_cookie = $sso_config->get('sso_enable_secure_cookie');

    
    $path = parse_url(Url::fromRoute('<front>')->toString());
    $sso_path = $path['path'];
    
    $my_settings = array(
    'emailVerificationUrl' => $emailVerificationUrl,  
    'forgotVerificationUrl' => $forgotVerificationUrl,  
    'appName' => trim($config->get('sso_site_name')),
    'apikey' => trim($config->get('api_key')),
    'appPath' => trim($sso_path),
    'secureCookie' => (($sso_secure_cookie == 1) ? 'https:' : ''),
    'callback' => urldecode(userregistration_get_callback_url()),
    'home' => Url::fromRoute('<front>')->setAbsolute()->toString()
  );  

    
  if ($config->get('raas_terms_and_condition_html') != '') {
    $my_settings['termsAndConditionHtml'] = $config->get('raas_terms_and_condition_html');
  }

  if (is_numeric($config->get('raas_form_render_delay')) != '0') {
    $my_settings['formRenderDelay']= (int) $config->get('raas_form_render_delay');
  }

  $min_length = $config->get('raas_min_password_length');
  $max_length = $config->get('raas_max_password_length');
  if (!empty($min_length)) {
   
    $my_settings['passwordminlength']=  $min_length;
  }
   if ( !empty($max_length)) {
   
    $my_settings['passwordmaxlength']=  $max_length;
  }
  if ($config->get('raas_v2_recaptcha_site_key') != '') {
    $my_settings['V2RecaptchaSiteKey']=  $config->get('raas_v2_recaptcha_site_key');
  }
  if ($config->get('raas_inform_validation_messages') != '' && $config->get('raas_inform_validation_messages')!= 'false') {
    $my_settings['inFormvalidationMessage']= true;
  } 
  if ($config->get('raas_forgot_password_template') != '') {
    $my_settings['forgotPasswordTemplate']= $config->get('raas_forgot_password_template');
  } 
  
  $emailVerifyOpt = $config->get('raas_email_verification_condition');   
  if(isset($emailVerifyOpt) && $emailVerifyOpt != '') {
  if ($emailVerifyOpt == '0') { 
     if ($config->get('raas_enable_login_on_email_verification') != '' && $config->get('raas_enable_login_on_email_verification')!= 'false') {
     $my_settings['enableLoginOnEmailVerification']= (boolean) $config->get('raas_enable_login_on_email_verification');
     } if ($config->get('raas_prompt_password_on_social_login') != '' && $config->get('raas_prompt_password_on_social_login')!= 'false') {
     $my_settings['promptPasswordOnSocialLogin']= (boolean) $config->get('raas_prompt_password_on_social_login');
     } if ($config->get('raas_enable_user_name') != '' && $config->get('raas_enable_user_name')!= 'false') {
     $my_settings['enableUserName']= (boolean) $config->get('raas_enable_user_name');
     } if ($config->get('raas_ask_email_always_for_unverified') != '' && $config->get('raas_ask_email_always_for_unverified')!= 'false') {
      $my_settings['askEmailAlwaysForUnverified']=  (boolean) $config->get('raas_ask_email_always_for_unverified');
     }
   } elseif ($emailVerifyOpt == '1') { 
     if ($config->get('raas_enable_login_on_email_verification') != '' && $config->get('raas_enable_login_on_email_verification')!= 'false') {
      $my_settings['enableLoginOnEmailVerification']= (boolean)  $config->get('raas_enable_login_on_email_verification');
      } if ($config->get('raas_ask_email_always_for_unverified') != '' && $config->get('raas_ask_email_always_for_unverified')!= 'false') {
      $my_settings['askEmailAlwaysForUnverified']=  (boolean) $config->get('raas_ask_email_always_for_unverified');
     }
      $my_settings['OptionalEmailVerification']= (boolean) 'true';
   } elseif ($emailVerifyOpt == '2') {
      $my_settings['DisabledEmailVerification']= (boolean) 'true';
   }
  }
  
  if ($config->get('raas_email_verification_template') != '') {
        $my_settings['emailVerificationTemplate']=  $config->get('raas_email_verification_template');
  }
  if ($config->get('raas_custom_options') != '') { 
    $my_settings['CustomScript'] = "";
   $jsondata = userregistration_json_validate($config->get('raas_custom_options'));   
    if (is_object($jsondata)) {       
        foreach($jsondata as $key => $value) {
            $my_settings['CustomScript'] .= "raasoption.".$key."=";
            if (is_object($value) || is_array($value)) {  
                $encodedStr = json_encode($value);   
                $my_settings['CustomScript'] .= $encodedStr.';';
            } else {                
            $my_settings['CustomScript'] .= '"'.$value.'"'.';';
            }
        }       
    } else {
         if (is_string($jsondata)) {     
             $my_settings['CustomScript'] = $jsondata;             
         }
    }     
  }    

    $page['#attached']['drupalSettings']['raas']  = $my_settings;
    $page['#attached']['library'][] = 'userregistration/drupal.coreraas';
}

/**
 * Check String is json or not.
 *
 * @param $string 
 * @return json|string
 */    
function userregistration_json_validate($string){
    $result = json_decode(str_replace("'", '"',$string));    
    if (json_last_error() == JSON_ERROR_NONE) {         
       return $result;        
    } else {         
        return $string;       
    }
}

function userregistration_mail($key, &$message, $params) {
  $data['user'] = $params['account'];
  $options['langcode'] = $message['langcode'];
  user_mail_tokens($variables, $data, $options);
  switch ($key) {
    case 'welcome_email':
      $message['subject'] = t('Thank you for registering at @site', $variables, $options);
      $message['body'][] = t("Thank you for registering at @site.

You will be able to login in the future using

Username : @username
Password : @pass

--  [site:name] team", $variables, $options);
      break;
  }
}

function userregistration_get_callback_url() {
  $destination = (\Drupal::destination()->getAsArray());
  $callback = $destination['destination'];

  if (strpos($callback, 'ajax') !== FALSE) {
    if (isset($_SESSION['redirect_url'])) {
      return $_SESSION['redirect_url'];
    }
    else {
      $callback = Url::fromRoute('user');
    }
  }
  $url = Url::fromUserInput('/user/sociallogin', array(
    'query' => array('destination' => $callback),
    'absolute' => TRUE,
  ))->toString();
  return urlencode($url);
}

function userregistration_add_user_data_after_save($user, $userprofile) {
$user_manager = \Drupal::service('userregistration.user_manager');  
  $user_manager->userregistration_update_user_table($userprofile->Uid, $user->id());
}

function userregistration_user_presave($account) {
  $user_manager = \Drupal::service('userregistration.user_manager'); 
  $raas_uid = $user_manager->userregistration_get_raas_uid($account->id());
  $raas_email = $user_manager->userregistration_get_raas_email($account->id());
  $raas_uname = $user_manager->userregistration_get_raas_uname($account->id());
  $config = \Drupal::config('sociallogin.settings');
  $apiKey = trim($config->get('api_key'));
  $apiSecret = trim($config->get('api_secret'));
  

 if (\Drupal::moduleHandler()->moduleExists('userregistration')) { 

  if (isset($_POST['op']) && $_POST['op'] == 'Save') {
    
    if(isset($_POST['form_id']) && $_POST['form_id'] == 'user_form'){
       if(isset($_POST['mail']) && $_POST['mail'] != ''){
       if($raas_email != $_POST['mail']) {    
       $addEmail = array(
        'emailid'=> $_POST['mail'],
        'emailType'=> 'Primary',  
        );  
       
    try {   
       $accountObj = new AccountAPI($apiKey, $apiSecret, array('output_format' => 'json'));
       $result = $accountObj->userAdditionalEmail($raas_uid, 'add', $addEmail);      

      if(isset($result->isPosted) && $result->isPosted) {
          
        try {
        $removeEmail = array(
        'emailid'=> $raas_email,
        'emailType'=> 'Primary',  
        ); 
             $response = $user_manager->user_additional_email($raas_uid, 'remove', $removeEmail);    
               
            } catch (LoginRadiusException $e) {              
                    $msg = isset($e->getErrorResponse()->description) ? $e->getErrorResponse()->description : 'Password is not set';
                    drupal_set_message(t($msg), 'error');
            }
      }
    }
      catch (LoginRadiusException $e) { 
          if (isset($e->getErrorResponse()->description) && $e->getErrorResponse()->description) {                 
             
             $returndata = $user_manager->userregistration_get_accounts($raas_uid); 
             $status = '';
             foreach($returndata as $key=>$value){
                if($value->Provider == 'RAAS'){
                   $status = 'true';
                }                
            } 
             
            if(isset($status) && $status == 'true') { 
                drupal_set_message(t($e->getErrorResponse()->description), 'error');                   
            } else {
                drupal_set_message(t('Please set password to change email address.'), 'error');                 
            }
         
        $response = new RedirectResponse(Url::fromRoute('<current>')->toString());
        $response->send(); 
        exit();
           
           }            
        }    
    }}
      if(isset($_POST['name']) && $_POST['name'] != ''){
     if($raas_uname != $_POST['name']) {          
         
               $response = $user_manager->userregistration_get_accounts($raas_uid); 
                $raas_provider_id = '';                  
                    foreach ($response as $k => $val) {                       
                    if (isset($val->Provider) && strtolower($val->Provider) == 'raas') {                                            
                        $raas_provider_id = $val->ID;                       
                        break;
                       }
                    }        
      
        
     if($raas_provider_id) {       
        $params = array(      
        'UserName' => $_POST['name'],     
      );
      
      try {
        $userObject = new UserAPI ($apiKey, $apiSecret, array('output_format' => 'json'));   
        $userObject->edit($raas_provider_id, $params);
      }
      catch (LoginRadiusException $e) {
         $msg = isset($e->getErrorResponse()->description) ? $e->getErrorResponse()->description : 'error';
         $response = new RedirectResponse(Url::fromRoute('<current>')->toString());
         $response->send(); 
         exit();         
      } 
      }
      }}
   }
 }
}   
}

function userregistration_user_update($account) {
  $user_manager = \Drupal::service('userregistration.user_manager'); 
  $raas_uid = $user_manager->userregistration_get_raas_uid($account->id());
  $provider_user_id =  $user_manager->userregistration_get_raas_provider_id($account->id());
  
    if (isset($_POST['op']) && $_POST['op'] == 'Save') {         
    
    if (isset($_POST['status'])) {
      if ($_POST['status'] == "0" && isset($raas_uid) && !empty($raas_uid)) {       
         $user_manager->userregistration_block_user($raas_uid);
      }
      else {         
         $user_manager->userregistration_unblock_user($raas_uid);
      }
    }
    if (isset($_POST['pass']['pass1']) && !empty($_POST['pass']['pass1'])) {       
$user = \Drupal::currentUser()->getRoles();
      if (in_array("administrator", $user)) {
        if (empty($provider_user_id)) {
          if (empty($raas_uid)) {
            $params = array(
              'EmailId' => $account->getEmail(),
              'firstname' => $account->getUsername(),
              'lastname' => '',
              'password' => $_POST['pass']['pass1'],
            );
            $user_manager->userregistration_create_user($params);
            return;
          }     
        }
        else {
          $user_manager->userregistration_set_password($raas_uid, $_POST['pass']['pass1']);
        }
      }
    }
  }
  elseif (isset($_POST['op']) && $_POST['op'] == 'Apply' && isset($raas_uid) && !empty($raas_uid)) {
    if (isset($_POST['action'])) {
       
      if ($_POST['action'] == 'user_block_user_action') {
      $user_manager->userregistration_block_user($raas_uid);
      }
      elseif ($_POST['action'] == 'user_unblock_user_action' ) {       
        $user_manager->userregistration_unblock_user($raas_uid);        
      }
    }
  }    
}
  /**
 * Delete user form submit.
 *
 * @param $form_state
 * @param $provider
 */
function userregistration_add_user_delete_form_submit($uid, $provider, $provider_id) {
 $user_manager = \Drupal::service('userregistration.user_manager');
  $raas_uid = $user_manager->userregistration_get_raas_uid($uid);
 
  $result = $user_manager->userregistration_unlink_account($raas_uid, $provider, $provider_id);
  if(isset($result->isPosted) && $result->isPosted){    
   
      $query = $user_manager->deleteSocialAccount($_POST['providerId']);      
      drupal_set_message(t("Your account successfully unlinked."));          
  } else {
    $msg = isset($result) ? $result : 'We were unable to delete the linked account.';
    drupal_set_message(t($msg), 'warning');    
  }
  $response = new RedirectResponse($uid. '/edit');
  return $response->send();
}

/**
 * user form alter.
 *
 * @param $form
 * @param $form_state
 */
function userregistration_form_user_form_alter(&$form, FormStateInterface $form_state) {
   $user_manager = \Drupal::service('userregistration.user_manager');
  if (isset($_POST['value']) && $_POST['value'] == 'accountUnLink' && !empty($_POST['provider']) && !empty($_POST['providerId'])) {   
      
    $raas_uid = $user_manager->userregistration_get_raas_uid(\Drupal::currentUser()->id());    
    $result = $user_manager->userregistration_unlink_account($raas_uid, $_POST['provider'], $_POST['providerId']);
    
    if(isset($result->isPosted) && $result->isPosted){  
      $query = $user_manager->deleteSocialAccount($_POST['providerId']);      
      drupal_set_message(t("Your account successfully unlinked."));          
    } else {     
    $msg = isset($result) ? $result : 'We were unable to delete this linked account.';
    drupal_set_message(t($msg), 'error');
    }
  }
  $config = \Drupal::config('sociallogin.settings');
  unset($form['lr_raas_linked'] );
  $user = \Drupal::currentUser()->getRoles();  
  
   if (!in_array("administrator", $user) &&  !\Drupal::currentUser()
      ->isAnonymous()) {  
       
    unset($form['#validate'][1]);
    unset($form['account']['pass']);
    unset($form['account']['current_pass']);
    $form['account']['mail']['#disabled'] = TRUE;
     if (\Drupal::moduleHandler()->moduleExists('userregistration')) {
    $form['account']['current_pass_required_value']['#access'] = FALSE;
    $form['account']['current_pass']['#access'] = FALSE;
     }
    $form['lr_raas_linked'] = array(
      '#type' => 'details',
      '#title' => $config->get('linking_text'),
      '#theme' => 'lr_raas_linked',
      '#attributes' => array('class' => array('lr-raas-linked')),
      '#weight' => -20,
      '#open' => TRUE,
     /* '#attached' => array(
        'drupalSettings' => array('lrsociallogin' => $my_settings),
      ),*/
    );
    $optionVal = $config->get('raas_email_verification_condition');
    if ($config->get('enable_linking') == 0 ||(isset($_SESSION['emailVerified']) && !$_SESSION['emailVerified']) || $optionVal == 2) { 
        unset($form['lr_raas_linked']);
    } 
  } 
  if (in_array("administrator", $user)) {
     $current_path = \Drupal::service('path.current')->getPath();  
     $parts = Explode('/', $current_path);   
     if(isset($parts) && $parts[3] != 'create') {
     $raas_uid = $user_manager->userregistration_get_raas_uid($parts[2]); 
   
      try {
        $returndata = $user_manager->userregistration_get_accounts($raas_uid); 
             $status = '';             
             foreach($returndata as $key=>$value){
                if($value->Provider == 'RAAS'){
                   $status = 'true';
                }                
              }    
             
            if(isset($status) && $status == 'true') { 
               $form['account']['name']['#disabled'] = FALSE;                    
               $form['account']['mail']['#disabled'] = FALSE;                    
            } else {  
                $form['account']['name']['#disabled'] = TRUE;                          
                $form['account']['mail']['#disabled'] = TRUE;  
            }
      }  catch (LoginRadiusException $e) { 
            $msg = isset($e->getErrorResponse()->description) ? $e->getErrorResponse()->description : 'action failed';
            drupal_set_message(t($msg), 'error');  
      }
    } else {
        $form['account']['mail']['#required'] = TRUE;  
    }  
  }
  return $form;
}

 /**
 * Unset validation for current password.
 *
 * @param $fields
 * @param $entity_type
 */
function userregistration_entity_base_field_info_alter(&$fields, EntityTypeInterface $entity_type) {
    if (\Drupal::moduleHandler()->moduleExists('userregistration')) {
    if ($entity_type->id() == 'user') {      
      $constraints = $fields['mail']->getConstraints();
      unset($constraints['ProtectedUserField']);
      $fields['mail']->setConstraints($constraints);

      $constraints = $fields['pass']->getConstraints();
      unset($constraints['ProtectedUserField']);
      $fields['pass']->setConstraints($constraints);
     }
    }
}

/**
 * delete user.
 *
 * @param $account
 */
function userregistration_user_predelete($account) {  
  
  $user_manager = \Drupal::service('userregistration.user_manager');
  $raas_uid = $user_manager->userregistration_get_raas_uid($account->id());
 
  $result = $user_manager->user_delete($raas_uid);   
  $user_manager->deleteMapUser($account->id()); 
}

/**
 * insert user.
 *
 * @param $account
 */
function userregistration_user_insert($account) {
 
$user = \Drupal::currentUser()->getRoles();
      if (in_array("administrator", $user)) {

  if (isset($_POST['op']) && $_POST['op'] == 'Create new account') {
    $user_manager = \Drupal::service('userregistration.user_manager');
    $params = array(
        'EmailId' => $_POST['mail'],
        'UserName' => $_POST['name'],
        'firstname' => $_POST['name'],
        'lastname' => '',
        'password' => $_POST['pass']['pass1']
      );
    
    $config = \Drupal::config('sociallogin.settings');
    $apiKey = trim($config->get('api_key'));
    $response =  $user_manager->userregistration_create_user($params);  

    if (isset($response->Uid) && !empty($response->Uid)) {          
      \Drupal\Core\Database\Database::getConnection()->update('users_field_data')
          ->fields(array(
            'login' => REQUEST_TIME,
          ))
          ->condition('uid', $account->id())
          ->execute();
      $user_manager->userregistration_update_user_table($response->Uid, $account->id());
      
       if(isset($_POST['notify']) && $_POST['notify'] == '1') {             
            try {
                $forgotVerificationUrl = Url::fromRoute('user.login')->setAbsolute()->toString();          
                $validate_url = 'https://api.loginradius.com/raas/client/password/forgot?apikey=' . rawurlencode(trim($apiKey)) . '&emailid=' . rawurlencode(trim($_POST['mail'])) . '&resetpasswordurl=' .$forgotVerificationUrl;              
                $result = LoginRadius::apiClient($validate_url, FALSE, array('output_format'=>'json'));       
                if (isset($result->isPosted) && $result->isPosted) {
                    drupal_set_message(t('A welcome message with further instructions has been emailed to the new user <a href=":url">%name</a>.', array(':url' => $account->url(), '%name' => $_POST['name'])));
                }                      
        }
        catch (LoginRadiusException $e) {         
         $msg = isset($e->getErrorResponse()->description) ? $e->getErrorResponse()->description : 'error';
         drupal_set_message(t($msg), 'error');         
         $response = new RedirectResponse(Url::fromRoute('<current>')->toString());
         $response->send(); 
         exit();
        }
       }
        if (isset($_POST['status']) && $_POST['status'] == "0") {
          $user_manager->userregistration_block_user($response->Uid);
        }
    }    
  }
 }
}

function userregistration_mail_alter(&$message) {
  if ($message['key'] == 'register_admin_created') { 
    $message['send'] = FALSE;
  }
}
/**
 * Remove Links if Social Login module enabled.
 *
 * @param $links
 */
function userregistration_menu_links_discovered_alter(&$links) {
    $links['sociallogin.settings_form']['title'] = t('User Registration');
    $links['sociallogin.settings_form']['description'] = t('Configure your user registration settings');
}

function userregistration_menu_local_tasks_alter(&$data, $route_name) {
  $data['tabs'][0]['sociallogin.settings_form']['#link']['title'] = t('User Registration settings');
}

function userregistration_form_sociallogin_settings_alter(&$form, FormStateInterface $form_state){
  $form['lr_basic_settings']['#title'] = t('User Registration basic settings');
}

function userregistration_form_advanced_settings_alter(&$form, FormStateInterface $form_state){
  $config = \Drupal::config('sociallogin.settings');
  $hd_config = \Drupal::config('hostedpage.settings');
  $form['lr_interface_settings']['#title'] = t('User Registration interface customization');
  $form['lr_interface_display_settings']['#title'] = t('User Registration interface display settings');
  $form['lr_user_settings']['#title'] = t(' User Registration additional settings');
  unset($form['lr_user_settings']['email_required']);
  unset($form['lr_user_settings']['popup_error']);
  unset($form['lr_user_settings']['skip_email_verification']);
  unset($form['lr_user_settings']['welcome_email']);
  unset($form['lr_user_settings']['welcome_email_message']);
  unset($form['lr_user_settings']['popup_status']);
  
  unset($form['lr_user_settings']['admin_login']);
  unset($form['lr_user_settings']['lr_social_login_force_registration']);
  unset($form['lr_user_settings']['lr_social_login_emailrequired_popup_text']);
  unset($form['lr_user_settings']['lr_social_login_emailrequired_popup_wrong']);
  unset($form['lr_interface_settings']['interface_size']);
  unset($form['lr_interface_settings']['interface_columns']);
  unset($form['lr_interface_settings']['interface_bgcolor']);
  unset($form['lr_interface_display_settings']);
  $user_settings_group = 'lr_user_settings';
  $form[$user_settings_group]['#attached']['library'] =array('userregistration/drupal.raas_back');
  $form[$user_settings_group]['raas_inform_validation_messages'] = [
    '#type' => 'radios',
    '#title' => t('Do you want to display form validation message on authentication pages?'),
    '#default_value' => $config->get('raas_inform_validation_messages') ? $config->get('raas_inform_validation_messages') : 'false',
    '#options' => array(
      'true' => t('Yes'),
      'false' => t('No'),
    ),
    '#description' => t('Form validation includes checking for username and password lengths, password complexity, etc.')
  ];
  $form[$user_settings_group]['raas_terms_and_condition_html'] = [
    '#type' => 'textarea',
    '#title' => t('Enter text to be displayed under the Terms and Condition on the registration page'),
    '#rows' => 2,
    '#default_value' => $config->get('raas_terms_and_condition_html'),    
    '#attributes' =>array('placeholder' => t('terms and conditon text'))
  ];
  $form[$user_settings_group]['raas_form_render_delay'] = [
    '#type' => 'textfield',
    '#title' => t('Enter delay time to generate authentication pages'),
    '#default_value' => $config->get('raas_form_render_delay'),
    '#description' => t('Recommended for content heavy sites where page loading time is longer due to lots of images, videos, etc. on the page.'),
    '#attributes' =>array('placeholder' => t('100'))
  ];

  $form[$user_settings_group]['raas_min_password_length'] = [
    '#type' => 'textfield',
    '#title' => t('Enter desired minimum length for password?'),
    '#default_value' => $config->get('raas_min_password_length'), 
    '#attributes' =>array('placeholder' => t('8'))
  ];
  $form[$user_settings_group]['raas_max_password_length'] = [
    '#type' => 'textfield',
    '#title' => t('Enter desired maximum length for password?'),
    '#default_value' => $config->get('raas_max_password_length'),
    '#description' => t('If you want to set password length validation then set both minimum and maximum password length, otherwise it will not work.'),
    '#attributes' =>array('placeholder' => t('32'))
  ];

  $form[$user_settings_group]['raas_v2_recaptcha_site_key'] = [
    '#type' => 'textfield',
    '#title' => t('Enter Google reCaptcha public key'),
    '#default_value' => $config->get('raas_v2_recaptcha_site_key'),    
    '#attributes' =>array('placeholder' => t('google recaptcha key')),   
  ];
  $form[$user_settings_group]['raas_forgot_password_template'] = [
    '#type' => 'textfield',
    '#title' => t('Enter template name for forgot password email'),
    '#default_value' => $config->get('raas_forgot_password_template'),  
    '#attributes' =>array('placeholder' => t('template name'))
  ];
  $form[$user_settings_group]['raas_email_verification_template'] = [
    '#type' => 'textfield',
    '#title' => t('Enter template name for email verification email'),
    '#default_value' => $config->get('raas_email_verification_template'),  
    '#attributes' =>array('placeholder' => t('template name'))
  ];  
  $form[$user_settings_group]['raas_custom_options'] = [
    '#type' => 'textarea',
    '#title' => t('Please enter custom user registration options for LoginRadius interface.'),
    '#id' => 'add_custom_options',
    '#rows' => 4,
    '#default_value' => $config->get('raas_custom_options'),  
    '#description' => t('Custom User Registration options that are added in the LoginRadius js.'),  
    '#attributes' => array(
    'placeholder' => t('user registration custom option'),
    'onchange' => "lrCheckValidJson();",

   ),      
   ];
   $form[$user_settings_group]['raas_email_verification_condition'] = [
    '#type' => 'radios',
    '#id' => 'email_verification_options',
    '#title' => t('Select your desired email verification option during the registration process.'),
    '#default_value' => $config->get('raas_email_verification_condition')? $config->get('raas_email_verification_condition') :0,
    '#options' => array( 
      0 => t('Required Email Verification'),
      1 => t('Optional Email Verification'),     
      2 => t('Disabled Email Verification')     
    ), 
    '#attributes' => array(
    'onchange' => "showAndHideUI();",
  ),
  ];
   
  $form[$user_settings_group]['raas_enable_login_on_email_verification'] = [
    '#type' => 'radios',
    '#title' => t('Do you want to enable login upon email verification?'),
    '#default_value' => $config->get('raas_enable_login_on_email_verification')?$config->get('raas_enable_login_on_email_verification'):'false',
    '#options' => array(
      'true' => t('Yes'),
      'false' => t('No'),
    ),
    '#description' => t('Log user in after the verification link is clicked in the verification email.') 
  ];
     
  $form[$user_settings_group]['raas_prompt_password_on_social_login'] = [
    '#type' => 'radios',
    '#id' => 'prompt_password',
    '#title' => t('Do you want to prompt for password after registration with social provider?'),
    '#default_value' => $config->get('raas_prompt_password_on_social_login')?$config->get('raas_prompt_password_on_social_login'):'false',
    '#options' => array(
      'true' => t('Yes'),
      'false' => t('No'),
    ),   
  ];
  
  $form[$user_settings_group]['raas_enable_user_name'] = [
    '#type' => 'radios',
    '#title' => t('Do you want to enable login with username?'),
    '#default_value' => $config->get('raas_enable_user_name') ? $config->get('raas_enable_user_name') : 'false',
    '#options' => array(
      'true' => t('Yes'),
      'false' => t('No'),
    ),    
  ];
  $form[$user_settings_group]['raas_ask_email_always_for_unverified'] = [
    '#type' => 'radios',
    '#title' => t('Do you want to ask for email every time an unverified user tries to log in?'),
    '#default_value' => $config->get('raas_ask_email_always_for_unverified') ? $config->get('raas_ask_email_always_for_unverified') : 'false',
    '#options' => array(
      'true' => t('Yes, (ask for email address every time an unverified user logs in)'),
      'false' => t('No'),
    ),    
  ];
  
 
  if($hd_config->get('lr_hosted_page_enable') == '1'){
  unset($form['lr_user_settings']['raas_inform_validation_messages']);
  unset($form['lr_user_settings']['raas_terms_and_condition_html']);
  unset($form['lr_user_settings']['raas_form_render_delay']);
  unset($form['lr_user_settings']['raas_min_password_length']);
  unset($form['lr_user_settings']['raas_max_password_length']);
  unset($form['lr_user_settings']['raas_v2_recaptcha_site_key']);
  unset($form['lr_user_settings']['raas_forgot_password_template']);
  unset($form['lr_user_settings']['raas_email_verification_template']);
  unset($form['lr_user_settings']['raas_custom_options']);
  unset($form['lr_user_settings']['raas_email_verification_condition']);
  unset($form['lr_user_settings']['raas_enable_login_on_email_verification']);
  unset($form['lr_user_settings']['raas_prompt_password_on_social_login']);
  unset($form['lr_user_settings']['raas_enable_user_name']);
  unset($form['lr_user_settings']['raas_ask_email_always_for_unverified']);
  }
  return $form;
}

function userregistration_add_extra_config_settings(){
  return array('raas_inform_validation_messages','raas_terms_and_condition_html',
'raas_form_render_delay','raas_min_password_length',
'raas_max_password_length','raas_v2_recaptcha_site_key','raas_forgot_password_template','raas_email_verification_template','raas_custom_options','raas_email_verification_condition','raas_enable_login_on_email_verification','raas_prompt_password_on_social_login','raas_enable_user_name','raas_ask_email_always_for_unverified');
}





                                                         