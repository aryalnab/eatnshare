<?php

/**
 * @file
 * Implement socialprofiledata support for Drupal
 */
use Drupal\Core\Form\FormStateInterface;
use Drupal\Core\Url;
use \LoginRadiusSDK\LoginRadiusException;
use \LoginRadiusSDK\SocialLogin\SocialLoginAPI;

module_load_include('php', 'sociallogin', 'customhttpclient');
global $apiClient_class;
$apiClient_class = 'CustomHttpClient';
/**
 * Delete loginradius database tables.
 *
 * @param  string $table_name Database table name
 * @param int $user_id User ID
 */
function socialprofiledata_delete($table_name, $user_id) {
  try {
    \Drupal\Core\Database\Database::getConnection()->delete($table_name)
      ->condition('user_id', $user_id)
      ->execute();
  }
  catch (Exception $e) {
   // watchdog_exception('type', $e);
  }
}

/**
 * Insert extended data into database loginradius tables.
 *
 * @param string $table_name Database table name
 * @param array $data_values Data values that will insert in table
 */
function socialprofiledata_insert($table_name, $data_values) {
  if (!empty($data_values) && is_array($data_values)) {
    try {

     return $temp_id = \Drupal\Core\Database\Database::getConnection()->insert($table_name)
        ->fields(array_keys($data_values))
        ->values($data_values)
        ->execute();
      }
    catch (Exception $e) {     
     // watchdog_exception('type', $e);
    }
  }
}

/**
 * Insert extended data into database loginradius tables.
 *
 * @param string $table_name Database table name
 * @param array $data_values Data values that will insert in table
 */
function socialprofiledata_insert_array_values($table_name, $user_id, $method_name, $data_values, $provider) {
  if (!empty($data_values) && is_array($data_values)) {
    $insert = \Drupal\Core\Database\Database::getConnection()->insert($table_name);
    foreach ($data_values as $data_value) {
      $data_value->provider = $provider;
      $post_data_value = $method_name($user_id, $data_value);
      $insert->fields(array_keys($post_data_value));
      $insert->values($post_data_value);
    }
    $insert->execute();
  }
}

/**
 * Update user data in loginradius database table.
 *
 * @param string $table_name Database table name
 * @param int $user_id User ID
 * @param array $data_values Data values that will update in table
 */
function socialprofiledata_update($table_name, $user_id, $data_values) {
  try {
    \Drupal\Core\Database\Database::getConnection()->update($table_name)
      ->fields($data_values)
      ->condition('user_id', $user_id)
      ->execute();
  }
  catch (Exception $e) {
   // watchdog_exception('type', $e);
  }
}

/**
 * Get extended user profile data from user profile.
 *
 * @param int $user_id User ID
 * @param object $userprofile User profile data
 * @return array contain data values of extended profile data
 */
function socialprofiledata_get_extended_profile($user_id, $userprofile) {
  return array(
    'user_id' => $user_id,
    'website' => ((isset($userprofile->Website) && socialprofiledata_check_array_and_object($userprofile->Website)) ? $userprofile->Website : ''),
    'favicon' => ((isset($userprofile->Favicon) && socialprofiledata_check_array_and_object($userprofile->Favicon)) ? $userprofile->Favicon : ''),
    'industry' => ((isset($userprofile->Industry) && socialprofiledata_check_array_and_object($userprofile->Industry)) ? $userprofile->Industry : ''),
    'no_of_logins' => ((isset($userprofile->NoOfLogins) && socialprofiledata_check_array_and_object($userprofile->NoOfLogins)) ? $userprofile->NoOfLogins : ''),
    'about' => ((isset($userprofile->About) && socialprofiledata_check_array_and_object($userprofile->About)) ? $userprofile->About : ''),
    'timezone' => ((isset($userprofile->TimeZone) && socialprofiledata_check_array_and_object($userprofile->TimeZone)) ? $userprofile->TimeZone : ''),
    'verified' => ((isset($userprofile->Verified) && socialprofiledata_check_array_and_object($userprofile->Verified)) ? $userprofile->Verified : ''),
    'last_profile_update' => ((isset($userprofile->UpdatedTime) && socialprofiledata_check_array_and_object($userprofile->UpdatedTime)) ? $userprofile->UpdatedTime : ''),
    'created' => ((isset($userprofile->Created) && socialprofiledata_check_array_and_object($userprofile->Created)) ? $userprofile->Created : ''),
    'relationship_status' => ((isset($userprofile->RelationshipStatus) && socialprofiledata_check_array_and_object($userprofile->RelationshipStatus)) ? $userprofile->RelationshipStatus : ''),
    'quote' => ((isset($userprofile->Quota) && socialprofiledata_check_array_and_object($userprofile->Quota)) ? $userprofile->Quota : ''),
    'interested_in' => ((isset($userprofile->InterestedIn) && socialprofiledata_check_array_and_object($userprofile->InterestedIn)) ? $userprofile->InterestedIn : ''),
    'interests' => ((isset($userprofile->Interests) && socialprofiledata_check_array_and_object($userprofile->Interests)) ? $userprofile->Interests : ''),
    'religion' => ((isset($userprofile->Religion) && socialprofiledata_check_array_and_object($userprofile->Religion)) ? $userprofile->Religion : ''),
    'political_view' => ((isset($userprofile->Political) && socialprofiledata_check_array_and_object($userprofile->Political)) ? $userprofile->Political : ''),
    'https_image_url' => ((isset($userprofile->HttpsImageUrl) && socialprofiledata_check_array_and_object($userprofile->HttpsImageUrl)) ? $userprofile->HttpsImageUrl : ''),
    'followers_count' => ((isset($userprofile->FollowersCount) && socialprofiledata_check_array_and_object($userprofile->FollowersCount)) ? $userprofile->FollowersCount : 0),
    'friends_count' => ((isset($userprofile->FriendsCount) && socialprofiledata_check_array_and_object($userprofile->FriendsCount)) ? $userprofile->FriendsCount : ''),
    'is_geo_enabled' => ((isset($userprofile->IsGeoEnabled) && socialprofiledata_check_array_and_object($userprofile->IsGeoEnabled)) ? $userprofile->IsGeoEnabled : ''),
    'total_status_count' => ((isset($userprofile->TotalStatusesCount) && socialprofiledata_check_array_and_object($userprofile->TotalStatusesCount)) ? $userprofile->TotalStatusesCount : 0),
    'number_of_recommenders' => ((isset($userprofile->NumRecommenders) && socialprofiledata_check_array_and_object($userprofile->NumRecommenders)) ? $userprofile->NumRecommenders : 0),
    'honors' => ((isset($userprofile->Honors) && socialprofiledata_check_array_and_object($userprofile->Honors)) ? $userprofile->Honors : ''),
    'associations' => ((isset($userprofile->Associations) && socialprofiledata_check_array_and_object($userprofile->Associations)) ? $userprofile->Associations : ''),
    'hirable' => ((isset($userprofile->Hireable) && !empty($userprofile->Hireable) && socialprofiledata_check_array_and_object($userprofile->Hireable)) ? $userprofile->Hireable : 0),
    'repository_url' => ((isset($userprofile->Country->Name) && socialprofiledata_check_array_and_object($userprofile->Country->Name)) ? $userprofile->Country->Name : ''),
    'age' => ((isset($userprofile->Age) && socialprofiledata_check_array_and_object($userprofile->Age)) ? $userprofile->Age : 0),
    'professional_headline' => ((isset($userprofile->ProfessionalHeadline) && socialprofiledata_check_array_and_object($userprofile->ProfessionalHeadline)) ? $userprofile->ProfessionalHeadline : ''),
    'provider_access_token' => ((isset($userprofile->ProviderAccessCredential->AccessToken) && socialprofiledata_check_array_and_object($userprofile->ProviderAccessCredential->AccessToken)) ? serialize($userprofile->ProviderAccessCredential->AccessToken) : ''),
    'provider_token_secret' => ((isset($userprofile->ProviderAccessCredential->TokenSecret) && socialprofiledata_check_array_and_object($userprofile->ProviderAccessCredential->TokenSecret)) ? $userprofile->ProviderAccessCredential->TokenSecret : ''),
  );
}

/**
 * Get extended location data from user profile.
 *
 * @param int $user_id User ID
 * @param object $userprofile User profile data
 * @return array conatin data values of entended location data
 */
function socialprofiledata_get_extended_location($user_id, $userprofile) {
  return array(
    'user_id' => $user_id,
    'main_address' => ((isset($userprofile->MainAddress) && socialprofiledata_check_array_and_object($userprofile->MainAddress)) ? $userprofile->MainAddress : ''),
    'hometown' => ((isset($userprofile->HomeTown) && socialprofiledata_check_array_and_object($userprofile->HomeTown)) ? $userprofile->HomeTown : ''),
    'state' => ((isset($userprofile->State) && socialprofiledata_check_array_and_object($userprofile->State)) ? $userprofile->State : ''),
    'city' => ((isset($userprofile->City) && socialprofiledata_check_array_and_object($userprofile->City)) ? $userprofile->City : ''),
    'local_city' => ((isset($userprofile->LocalCity) && socialprofiledata_check_array_and_object($userprofile->LocalCity) && $userprofile->LocalCity != 'unknown') ? $userprofile->LocalCity : ''),
    'profile_city' => ((isset($userprofile->ProfileCity) && socialprofiledata_check_array_and_object($userprofile->ProfileCity)) ? $userprofile->ProfileCity : ''),
    'profile_url' => ((isset($userprofile->ProfileUrl) && socialprofiledata_check_array_and_object($userprofile->ProfileUrl)) ? $userprofile->ProfileUrl : ''),
    'local_language' => ((isset($userprofile->LocalLanguage) && socialprofiledata_check_array_and_object($userprofile->LocalLanguage) && $userprofile->LocalLanguage != 'unknown') ? $userprofile->LocalLanguage : ''),
    'language' => ((isset($userprofile->Language) && socialprofiledata_check_array_and_object($userprofile->Language) && $userprofile->Language != 'unknown') ? $userprofile->Language : ''),
  );
}

/**
 * Get basic user profile data from user profile.
 *
 * @param int $user_id User ID
 * @param object $userprofile User profile data
 * @return array conatin data values of basic profile data
 */
function socialprofiledata_get_basic_profile($user_id, $userprofile) {
  return array(
    'user_id' => $user_id,
    'provider' => ((isset($userprofile->Provider) && socialprofiledata_check_array_and_object($userprofile->Provider)) ? $userprofile->Provider : ''),
    'provider_id' => ((isset($userprofile->ID) && socialprofiledata_check_array_and_object($userprofile->ID)) ? $userprofile->ID : ''),
    'prefix' => ((isset($userprofile->Prefix) && socialprofiledata_check_array_and_object($userprofile->Prefix)) ? $userprofile->Prefix : ''),
    'first_name' => ((isset($userprofile->FirstName) && socialprofiledata_check_array_and_object($userprofile->FirstName)) ? $userprofile->FirstName : ''),
    'middle_name' => ((isset($userprofile->MiddleName) && socialprofiledata_check_array_and_object($userprofile->MiddleName)) ? $userprofile->MiddleName : ''),
    'last_name' => ((isset($userprofile->LastName) && socialprofiledata_check_array_and_object($userprofile->LastName)) ? $userprofile->LastName : ''),
    'suffix' => ((isset($userprofile->Suffix) && socialprofiledata_check_array_and_object($userprofile->Suffix)) ? $userprofile->Suffix : ''),
    'full_name' => ((isset($userprofile->FullName) && socialprofiledata_check_array_and_object($userprofile->FullName)) ? $userprofile->FullName : ''),
    'nick_name' => ((isset($userprofile->NickName) && socialprofiledata_check_array_and_object($userprofile->NickName)) ? $userprofile->NickName : ''),
    'profile_name' => ((isset($userprofile->ProfileName) && socialprofiledata_check_array_and_object($userprofile->ProfileName)) ? $userprofile->ProfileName : ''),
    'birth_date' => ((isset($userprofile->BirthDate) && socialprofiledata_check_array_and_object($userprofile->BirthDate)) ? $userprofile->BirthDate : ''),
    'gender' => ((isset($userprofile->Gender) && socialprofiledata_check_array_and_object($userprofile->Gender)) ? $userprofile->Gender : ''),
    'country_code' => ((isset($userprofile->Country->Code) && socialprofiledata_check_array_and_object($userprofile->Country->Code) && $userprofile->Country->Code != "unknown") ? $userprofile->Country->Code : ''),
    'country_name' => ((isset($userprofile->Country->Name) && socialprofiledata_check_array_and_object($userprofile->Country->Name) && $userprofile->Country->Name != "unknown") ? $userprofile->Country->Name : ''),
    'thumbnail_image_url' => ((isset($userprofile->ImageUrl) && socialprofiledata_check_array_and_object($userprofile->ImageUrl)) ? $userprofile->ImageUrl : ''),
    'image_url' => ((isset($userprofile->ImageUrl) && socialprofiledata_check_array_and_object($userprofile->ImageUrl)) ? $userprofile->ImageUrl : ''),
    'local_country' => ((isset($userprofile->LocalCountry) && socialprofiledata_check_array_and_object($userprofile->LocalCountry) && $userprofile->LocalCountry != 'unknown') ? $userprofile->LocalCountry : ''),
    'profile_country' => ((isset($userprofile->ProfileCountry) && socialprofiledata_check_array_and_object($userprofile->ProfileCountry) && $userprofile->ProfileCountry != 'unknown') ? $userprofile->ProfileCountry : ''),
  );
}

/**
 * Get company data from user profile.
 *
 * @param object $data User's company inofrmation
 * @return array conatin data values of basic profile data
 */
function socialprofiledata_get_company($data) {
  return array(
    'company_name' => (isset($data->Company->Name) ? $data->Company->Name : ''),
    'company_type' => (isset($data->Company->Type) ? $data->Company->Type : ''),
    'industry' => (isset($data->Company->Industry) ? $data->Company->Industry : ''),
  );
}

/**
 * Get position data from user profile
 *
 * @param int $user_id User ID
 * @param object $data Information of user's Position iin company
 * @param type $temp_id Id inserted in comapny
 * @return array contain data values of position information in company of user
 */
function socialprofiledata_get_position($user_id, $data, $company_data_value) {
  return array(
    'user_id' => $user_id,
    'position' => (isset($data->Position) ? $data->Position : ''),
    'summary' => (isset($data->Summary) ? $data->Summary : ''),
    'start_date' => (isset($data->StartDate) ? $data->StartDate : ''),
    'end_date' => (isset($data->EndDate) ? $data->EndDate : ''),
    'is_current' => (isset($data->IsCurrent) ? $data->IsCurrent : ''),
    'company' => (isset($company_data_value)) ? json_encode($company_data_value) : NULL,
    'location' => (isset($data->Location) ? $data->Location : ''),
  );
}

/**
 * Get education data from user profile.
 *
 * @param int $user_id User ID
 * @param object $education User's education data
 * @return array Contain data values of user's education
 */
function socialprofiledata_get_education($user_id, $education) {
  return array(
    'user_id' => $user_id,
    'school' => (isset($education->School) ? $education->School : ''),
    'year' => (isset($education->year) ? $education->year : ''),
    'type' => (isset($education->type) ? $education->type : ''),
    'notes' => (isset($education->notes) ? $education->notes : ''),
    'activities' => (isset($education->activities) ? $education->activities : ''),
    'degree' => (isset($education->degree) ? $education->degree : ''),
    'field_of_study' => (isset($education->fieldofstudy) ? $education->fieldofstudy : ''),
    'start_date' => (isset($education->StartDate) ? $education->StartDate : ''),
    'end_date' => (isset($education->EndDate) ? $education->EndDate : ''),
  );
}

/**
 * Get phone number data from user profile.
 *
 * @param int $user_id User Id
 * @param object $data User's phone number
 * @return array Contain data values of user's phone number
 */
function socialprofiledata_get_phone_number($user_id, $data) {
  return array(
    'user_id' => $user_id,
    'number_type' => (isset($data->PhoneType) ? $data->PhoneType : ''),
    'phone_number' => (isset($data->PhoneNumber) ? $data->PhoneNumber : ''),
  );
}

/**
 * Get im account data from user profile.
 *
 * @param int $user_id
 * @param object $data user's im account information
 * @return array Contain data values of user's im accounts
 */
function socialprofiledata_get_im_account($user_id, $data) {
  return array(
    'user_id' => $user_id,
    'account_type' => (isset($data->AccountType) ? $data->AccountType : ''),
    'account_username' => (isset($data->AccountName) ? $data->AccountName : ''),
  );
}

/**
 * Get address data from user profile
 *
 * @param int $user_id User ID
 * @param object $data user's address information
 * @return array Contain data values of user's address information
 */
function socialprofiledata_get_address($user_id, $data) {
  return array(
    'user_id' => $user_id,
    'type' => (isset($data->Type) ? $data->Type : ''),
    'address_line1' => (isset($data->Address1) ? $data->Address1 : ''),
    'address_line2' => (isset($data->Address2) ? $data->Address2 : ''),
    'city' => (isset($data->City) ? $data->City : ''),
    'state' => (isset($data->State) ? $data->State : ''),
    'postal_code' => (isset($data->PostalCode) ? $data->PostalCode : ''),
    'region' => (isset($data->Region) ? $data->Region : ''),
  );
}

/**
 * Get sports data from user profile
 *
 * @param int $user_id User ID
 * @param object $data sports information
 * @return array Contain data values of user's sport information
 */
function socialprofiledata_get_sports($user_id, $data) {
  return array(
    'user_id' => $user_id,
    'sport_id' => (isset($data->Id) ? $data->Id : ''),
    'sport' => (isset($data->Name) ? $data->Name : ''),
  );
}

/**
 * Get inspirational people data from user profile
 *
 * @param int $user_id User ID
 * @param object $data inspirational people information
 * @return array Contain data values of user's inspirational people information
 */
function socialprofiledata_get_inspirational_people($user_id, $data) {
  return array(
    'user_id' => $user_id,
    'social_id' => (isset($data->Id) ? $data->Id : ''),
    'name' => (isset($data->Name) ? $data->Name : ''),
  );
}

/**
 * Get skills data from user profile
 *
 * @param int $user_id User ID
 * @param object $data User's skills information
 * @return array Contain data values of user's skills information
 */
function socialprofiledata_get_skills($user_id, $data) {
  return array(
    'user_id' => $user_id,
    'skill_id' => (isset($data->Id) ? $data->Id : ''),
    'name' => (isset($data->Name) ? $data->Name : ''),
  );
}

/**
 * Get current status data from user profile
 *
 * @param int $user_id User ID
 * @param object $data usr's current status
 * @return array Contain data values of current status
 */
function socialprofiledata_get_current_status($user_id, $data) {
  return array(
    'user_id' => $user_id,
    'status_id' => (isset($data->Id) ? $data->Id : ''),
    'status' => (isset($data->Text) ? $data->Text : ''),
    'source' => (isset($data->Source) ? $data->Source : ''),
    'created_date' => (isset($data->CreatedDate) ? $data->CreatedDate : ''),
  );
}

/**
 * Get certification data from user profile
 *
 * @param int $user_id User ID
 * @param object $data certification daat from user profile
 * @return array Contain data values of certification
 */
function socialprofiledata_get_certification($user_id, $data) {
  return array(
    'user_id' => $user_id,
    'certification_id' => (isset($data->Id) ? $data->Id : ''),
    'certification_name' => (isset($data->Name) ? $data->Name : ''),
    'authority' => (isset($data->Authority) ? $data->Authority : ''),
    'license_number' => (isset($data->Number) ? $data->Number : ''),
    'start_date' => (isset($data->StartDate) ? $data->StartDate : ''),
    'end_date' => (isset($data->EndDate) ? $data->EndDate : ''),
  );
}

/**
 * Get course data from user profile
 *
 * @param int $user_id User ID
 * @param object $data course data from userprofile
 * @return array Contain data values of course
 */
function socialprofiledata_get_course($user_id, $data) {
  return array(
    'user_id' => $user_id,
    'course_id' => (isset($data->Id) ? $data->Id : ''),
    'course' => (isset($data->Name) ? $data->Name : ''),
    'course_number' => (isset($data->Number) ? $data->Number : ''),
  );
}

/**
 * Get volunteer data from user profile.
 *
 * @param int $user_id User ID
 * @param object $data volunteer data from user profile
 * @return array Contain data values of volunteer
 */
function socialprofiledata_get_volunteer($user_id, $data) {
  return array(
    'user_id' => $user_id,
    'volunteer_id' => (isset($data->Id) ? $data->Id : ''),
    'role' => (isset($data->Role) ? $data->Role : ''),
    'organization' => (isset($data->Organization) ? $data->Organization : ''),
    'cause' => (isset($data->Cause) ? $data->Cause : ''),
  );
}

/**
 * Get recommendation data from user profile.
 * @param int $user_id User ID
 * @param object $data Recommendation Received data from userprofile
 * @return array Contain data values of recommendation
 */
function socialprofiledata_get_recommendation_received($user_id, $data) {
  return array(
    'user_id' => $user_id,
    'recommendation_id' => (isset($data->Id) ? $data->Id : ''),
    'recommendation_type' => (isset($data->RecommendationType) ? $data->RecommendationType : ''),
    'recommendation_text' => (isset($data->RecommendationText) ? $data->RecommendationText : ''),
    'recommender' => (isset($data->Recommender) ? $data->Recommender : ''),
  );
}

/**
 * Get language data from user profile
 *
 * @param int $user_id User ID
 * @param object $data Language data rom user profile
 * @return array Contain data values of language
 */
function socialprofiledata_get_language($user_id, $data) {
  return array(
    'user_id' => $user_id,
    'language_id' => (isset($data->Id) ? $data->Id : ''),
    'language' => (isset($data->Name) ? $data->Name : ''),
  );
}

/**
 * Get patent data from user profile
 *
 * @param int $user_id User ID
 * @param object $data user's patent information
 * @return array Contain data values of patent information
 */
function socialprofiledata_get_patent($user_id, $data) {
  return array(
    'user_id' => $user_id,
    'patent_id' => (isset($data->Id) ? $data->Id : ''),
    'title' => (isset($data->Title) ? $data->Title : ''),
    'date' => (isset($data->Date) ? $data->Date : ''),
  );
}

/**
 * Get favorites things data from user profile.
 *
 * @param int $user_id User ID
 * @param object $data user's favorite things
 * @return array Contain data values of favorite things
 */
function socialprofiledata_get_favorite_things($user_id, $data) {
  return array(
    'user_id' => $user_id,
    'social_id' => (isset($data->Id) ? $data->Id : ''),
    'name' => (isset($data->Name) ? $data->Name : ''),
    'type' => (isset($data->Type) ? $data->Type : ''),
  );
}

/**
 * Get games data from user profile.
 *
 * @param int $user_id User ID
 * @param object $game User's game data
 * @return array Contain data values of user's game
 */
function socialprofiledata_get_games($user_id, $game) {
  return array(
    'user_id' => $user_id,
    'game_id' => (isset($game->Id) ? $game->Id : ''),
    'category' => (isset($game->Category) ? $game->Category : ''),
    'name' => (isset($game->Name) ? $game->Name : ''),
    'created_date' => (isset($game->CreatedDate) ? $game->CreatedDate : ''),
  );
}

/**
 * Get television shows data from user profile.
 *
 * @param int $user_id User ID
 * @param object $television User's television show data
 * @return array Contain data values of user's television show
 */
function socialprofiledata_get_television_show($user_id, $television) {
  return array(
    'user_id' => $user_id,
    'television_id' => (isset($television->Id) ? $television->Id : ''),
    'category' => (isset($television->Category) ? $television->Category : ''),
    'name' => (isset($television->Name) ? $television->Name : ''),
    'created_date' => (isset($television->CreatedDate) ? $television->CreatedDate : ''),
  );
}

/**
 * Get movie data from user profile.
 *
 * @param int $user_id User ID
 * @param object $movie User's movie  data
 * @return array Contain data values of user's movie
 */
function socialprofiledata_get_movies($user_id, $movie) {
  return array(
    'user_id' => $user_id,
    'movie_id' => (isset($movie->Id) ? $movie->Id : ''),
    'category' => (isset($movie->Category) ? $movie->Category : ''),
    'name' => (isset($movie->Name) ? $movie->Name : ''),
    'created_date' => (isset($movie->CreatedDate) ? $movie->CreatedDate : ''),
  );
}

/**
 * Get book data from user profile.
 *
 * @param int $user_id User ID
 * @param object $book User's book  data
 * @return array Contain data values of user's book
 */
function socialprofiledata_get_book($user_id, $book) {
  return array(
    'user_id' => $user_id,
    'book_id' => (isset($book->Id) ? $book->Id : ''),
    'category' => (isset($book->Category) ? $book->Category : ''),
    'name' => (isset($book->Name) ? $book->Name : ''),
    'created_date' => (isset($book->CreatedDate) ? $book->CreatedDate : ''),
  );
}

/**
 * Get contact data from user profile
 *
 * @param int $user_id User ID
 * @param string $provider Social Network
 * @param object $contact User's contact
 * @return array Contain data values of user's contacts
 */
function socialprofiledata_get_contact($user_id, $contact) {
  return array(
    'user_id' => $user_id,
    'provider' => (isset($contact->provider) ? $contact->provider : ''),
    'name' => (isset($contact->Name) ? $contact->Name : ''),
    'email' => (isset($contact->EmailID) ? $contact->EmailID : ''),
    'phone_number' => (isset($contact->PhoneNumber) ? $contact->PhoneNumber : ''),
    'social_id' => (isset($contact->ID) ? $contact->ID : ''),
    'profile_url' => (isset($contact->ProfileUrl) ? $contact->ProfileUrl : ''),
    'image_url' => (isset($contact->ImageUrl) ? $contact->ImageUrl : ''),
    'status' => (isset($contact->Status) ? $contact->Status : ''),
    'industry' => (isset($contact->Industry) ? $contact->Industry : ''),
    'country' => (isset($contact->Country) ? $contact->Country : ''),
    'gender' => (isset($contact->Gender) ? $contact->Gender : ''),
    'location' => (isset($contact->Location) ? $contact->Location : ''),
    'birth_date' => (isset($contact->DateOfBirth) ? $contact->DateOfBirth : ''),
  );
}

/**
 * Get facebook event data from user profile
 *
 * @param int $user_id User ID
 * @param object $event Facebook event
 * @return array Contain data values of facebook event
 */
function socialprofiledata_get_facebook_like($user_id, $like) {  
   return array(
    'user_id' => $user_id,
    'like_id' => (isset($like->ID) ? $like->ID : ''),
    'name' => (isset($like->Name) ? $like->Name : ''),
    'category' => (isset($like->Category) ? $like->Category : ''),
    'created_date' => (isset($like->CreatedDate) ? $like->CreatedDate : ''),
    'website' => (isset($like->Website) ? $like->Website : ''),
    'description' => (isset($like->Description) ? $like->Description : ''),
  );
}
/**
 * Get facebook event data from user profile
 *
 * @param int $user_id User ID
 * @param object $event Facebook event
 * @return array Contain data values of facebook event
 */
function socialprofiledata_get_facebook_event($user_id, $event) {
  return array(
    'user_id' => $user_id,
    'event_id' => (isset($event->ID) ? $event->ID : ''),
    'owner_id' => (isset($event->OwnerId) ? $event->OwnerId : ''),
    'owner_name' => (isset($event->OwnerName) ? $event->OwnerName : ''),
    'description' => (isset($event->Description) ? $event->Description : ''),
    'event' => (isset($event->Name) ? $event->Name : ''),
    'start_time' => (isset($event->StartTime) ? $event->StartTime : ''),
    'updated_date' => (isset($event->UpdatedDate) ? $event->UpdatedDate : ''),
    'end_time' => (isset($event->EndTime) ? $event->EndTime : ''),
    'privacy' => (isset($event->Privacy) ? $event->Privacy : ''),
    'rsvp_status' => (isset($event->RsvpStatus) ? $event->RsvpStatus : ''),
    'location' => (isset($event->Location) ? $event->Location : ''),
  );
}

/**
 * Get facebook post data from user profile
 *
 * @param int $user_id User ID
 * @param object $post Facebook Post
 * @return array Contain data values of facebook post
 */
function socialprofiledata_get_facebook_post($user_id, $post) {
  return array(
    'user_id' => $user_id,
    'post_id' => (isset($post->ID) ? $post->ID : ''),
    'from_name' => (isset($post->Name) ? $post->Name : ''),
    'title' => (isset($post->Title) ? $post->Title : ''),
    'start_time' => (isset($post->StartTime) ? $post->StartTime : ''),
    'update_time' => (isset($post->UpdateTime) ? $post->UpdateTime : ''),
    'message' => (isset($post->Message) ? $post->Message : ''),
    'place' => (isset($post->Place) ? $post->Place : ''),
    'picture' => (isset($post->Picture) ? $post->Picture : ''),
    'likes' => (isset($post->Likes) ? $post->Likes : 0),
    'shares' => (isset($post->Shares) ? $post->Shares : 0),
  );
}

/**
 * Get company data from user profile
 *
 * @param int $user_id User ID
 * @param object $company user's company at linkedin social network
 * @return array Contain data values of user's comapny at LinkedIn social network.
 */
function socialprofiledata_get_linkedin_company($user_id, $company) {
  return array(
    'user_id' => $user_id,
    'company_id' => (isset($company->ID) ? $company->ID : ''),
    'company_name' => (isset($company->Name) ? $company->Name : ''),
  );
}

/**
 * Get status data from user profile
 *
 * @param int $user_id User ID
 * @param string $provider Social Network
 * @param object $data user's status information at social network
 * @return array Contain data values of user's status information
 */
function socialprofiledata_get_status($user_id, $data) {
  return array(
    'user_id' => $user_id,
    'provider' => (isset($data->provider) ? $data->provider : ''),
    'status_id' => (isset($data->Id) ? $data->Id : ''),
    'status' => (isset($data->Text) ? $data->Text : ''),
    'date_time' => (isset($data->DateTime) ? $data->DateTime : ''),
    'likes' => (isset($data->Likes) ? $data->Likes : ''),
    'place' => (isset($data->Place) ? $data->Place : ''),
    'source' => (isset($data->Source) ? $data->Source : ''),
    'image_url' => (isset($data->ImageUrl) ? $data->ImageUrl : ''),
    'link_url' => (isset($data->LinkUrl) ? $data->LinkUrl : ''),
  );
}

/**
 * Get twitter mention data from user profile.
 *
 * @param int $user_id User ID
 * @param object $mention user's twitter mention
 * @return array Contain data values of user's twitter mentions information
 */
function socialprofiledata_get_twitter_mentions($user_id, $mention) {
  return array(
    'user_id' => $user_id,
    'mention_id' => (isset($mention->Id) ? $mention->Id : ''),
    'tweet' => (isset($mention->Text) ? $mention->Text : ''),
    'date_time' => (isset($mention->DateTime) ? $mention->DateTime : ''),
    'likes' => (isset($mention->Likes) ? $mention->Likes : ''),
    'place' => (isset($mention->Place) ? $mention->Place : ''),
    'source' => (isset($mention->Source) ? $mention->Source : ''),
    'image_url' => (isset($mention->ImageUrl) ? $mention->ImageUrl : ''),
    'link_url' => (isset($mention->LinkUrl) ? $mention->LinkUrl : ''),
    'mentioned_by' => (isset($mention->Name) ? $mention->Name : ''),
  );
}

/**
 * Get group data from user profile.
 *
 * @param int $user_id User ID
 * @param string $provider Social network
 * @param object $group User's group information
 * @return array Contain data values of user's group information
 */
function socialprofiledata_get_group($user_id, $group) {
  return array(
    'user_id' => $user_id,
    'provider' => (isset($group->provider) ? $group->provider : ''),
    'group_id' => (isset($group->ID) ? $group->ID : ''),
    'group_name' => (isset($group->Name) ? $group->Name : ''),
    'email' => (isset($group->Email) ? $group->Email : ''),
    'group_description' => (isset($group->Description) ? $group->Description : ''),
    'country' => (isset($group->Country) ? $group->Country : ''),
    'postal_code' => (isset($group->PostalCode) ? $group->PostalCode : ''),
    'logo' => (isset($group->Logo) ? $group->Logo : ''),
    'image_url' => (isset($group->Image) ? $group->Image : ''),
    'member_count' => (isset($group->MemberCount) ? $group->MemberCount : 0),
  );
}

/**
 *  Get callback function for save extended data in particular table.
 *
 * @param $key table name
 * @return mixed
 */
function socialprofiledata_get_properties_callabck($key) {
  $result = array(
    'loginradius_education' => 'socialprofiledata_get_education',
    'loginradius_phone_numbers' => 'socialprofiledata_get_phone_number',
    'loginradius_IMaccounts' => 'socialprofiledata_get_im_account',
    'loginradius_addresses' => 'socialprofiledata_get_address',
    'loginradius_sports' => 'socialprofiledata_get_sports',
    'loginradius_inspirational_people' => 'socialprofiledata_get_inspirational_people',
    'loginradius_skills' => 'socialprofiledata_get_skills',
    'loginradius_current_status' => 'socialprofiledata_get_current_status',
    'loginradius_certifications' => 'socialprofiledata_get_certification',
    'loginradius_courses' => 'socialprofiledata_get_course',
    'loginradius_volunteer' => 'socialprofiledata_get_volunteer',
    'loginradius_recommendations_received' => 'socialprofiledata_get_recommendation_received',
    'loginradius_languages' => 'socialprofiledata_get_language',
    'loginradius_patents' => 'socialprofiledata_get_patent',
    'loginradius_favorites' => 'socialprofiledata_get_favorite_things',
    'loginradius_games' => 'socialprofiledata_get_games',
    'loginradius_television_show' => 'socialprofiledata_get_television_show',
    'loginradius_books' => 'socialprofiledata_get_book',
    'loginradius_movies' => 'socialprofiledata_get_movies',
  );
  return $result[$key];
}

/**
 * Delete data from database if exist and Save data into database.
 *
 * @param $key pass table name
 * @param $user_id user id
 * @param $data insertion data
 */
function socialprofiledata_save_premium_data($key, $user_id, $data) {
  socialprofiledata_delete($key, $user_id);

  foreach ($data as $value) {
    $callback = socialprofiledata_get_properties_callabck($key);
    $result = $callback($user_id, $value);
    socialprofiledata_insert($key, $result);
  }
}

/**
 * @param $obj LoginRadius Object
 * @param $lr_token LoginRadius token
 * @param $user_id user id
 * @param $key key to detect method and table name.
 *
 * Save premium data provider wise.
 */
function socialprofiledata_save_premium_data_by_provider($obj, $lr_token, $user_id, $key, $provider) {
  $result = array(
    'facebook_posts' => array(
      "getPosts",
      "socialprofiledata_get_facebook_post",
      "loginradius_facebook_posts",
    ),
    'lr_contacts' => array(
      "getContacts",
      "socialprofiledata_get_contact",
      "loginradius_contacts",
    ),
    'followed_companies_on' => array(
      "getFollowedCompanies",
      "socialprofiledata_get_linkedin_company",
      "loginradius_linkedin_companies",
    ),
    'status_message' => array(
      "getStatus",
      "socialprofiledata_get_status",
      "loginradius_status",
    ),
    'twitter_mentions' => array(
      "getMentions",
      "socialprofiledata_get_twitter_mentions",
      "loginradius_twitter_mentions",
    ),
    'lr_groups' => array(
      "getGroups",
      "socialprofiledata_get_group",
      "loginradius_groups",
    ),
    'facebook_profile_likes' => array(
      "getLikes",
      "socialprofiledata_get_facebook_like",
      "loginradius_facebook_likes",
    ),
    'facebook_profile_events' => array(
      "getEvents",
      "socialprofiledata_get_facebook_event",
      "loginradius_facebook_events",
    ),

  );
  if (isset($result[$key]) && \Drupal\Core\Database\Database::getConnection()->schema()->tableExists($result[$key][2])) {
    try{
    $posts = $obj->$result[$key][0]($lr_token);
    }catch (LoginRadiusException $e) {  
      $message = explode('"description": "', $e->getMessage());
      return (isset($message[1]) ? (($msg = explode('"errorCode', $message[1])) ? str_replace('",', '.', $msg[0]) : $e->getMessage() ): $e->getMessage());
    }
    if ($result[$key][0] == 'getContacts') {
      $posts = isset($posts->Data) ? $posts->Data : '';
    }
    if (is_array($posts) && count($posts) > 0) {
      socialprofiledata_delete($result[$key][2], $user_id);
      socialprofiledata_insert_array_values($result[$key][2], $user_id, $result[$key][1], $posts, $provider);
    }
  }
}

/**
 * Check table exits in database.
 * Check data exist iin database for specific user
 *
 * @param string $table_name Database table name
 * @param int $user_id User ID
 * @param int $tab_number Where to show user profile data in admin page
 * @return array|string Rendered html form to show extended profile data
 */
function socialprofiledata_check_data_in_table($table_name, $user_id, $tab_number) {
  $tabs = array(
    1 => 'Basic User Profile Data',
    2 => 'Extended Location Data',
    3 => 'Extended Profile Data',
    4 => 'Followed Companies',
    5 => 'Facebook Profile Events',
    6 => 'Status Messages',
    7 => 'Facebook Posts',
    8 => 'Twitter Mentions',
    9 => 'Groups',
    10 => 'Contacts/Friends Data',
    11 => 'Videos',
    12 => 'Facebook Likes',
    13 => 'Photos',
    14 => 'Albums',
  );

  if (\Drupal\Core\Database\Database::getConnection()->schema()->tableExists($table_name)) {
    $basic_result = \Drupal\Core\Database\Database::getConnection()->query("SELECT * FROM {" . $table_name . "} WHERE user_id = :uid", array(':uid' => $user_id));
    $basic_user_profile_data = $basic_result->fetchAll();

    if (isset($basic_user_profile_data) && count($basic_user_profile_data) > 0) {
      $data['output'] = '<li><a href="#tabs-' . $tab_number . '">' . $tabs[$tab_number] . '</a></li>';
      $data['user_profile'] = $basic_user_profile_data;
      return $data;
    }
  }
}

/**
 * Show extended data for specific user to admin
 *
 * @param type $tab_number Where to show user profile data in admin page
 * @param string $table_name Database table name
 * @param object $user_profile User profile data
 * @return string  Rendered html form to show user profile data at admin page
 */
function socialprofiledata_get_extended_data_to_show($tab_number, $table_name, $user_profile) {
  $output = '';

  if ($table_name == 'loginradius_basic_profile_data' || $table_name == 'loginradius_extended_profile_data') {
    return;
  }
  elseif (isset($user_profile[$table_name]) && count($user_profile[$table_name]) > 0) {
    $output .= '<div id="tabs-' . $tab_number . '">';
    $output .= socialprofiledata_show($user_profile[$table_name]);
    $output .= '</div>';
  }
  return $output;
}

/**
 * Show data in same tabs in basic profile data and extended profile data.
 *
 * @param array $data Contain table name and heading value of tab
 * @param int $user_id User Id
 * @param array $profile_data Contain profile data
 * @param boolean $show True, if you want to show data in same tab
 * @return string Rendered html form
 */
function socialprofiledata_show_data_in_same_tabs($data, $user_id, $profile_data, $show) {
  $output = '';

  foreach ($data as $key => $value) {
    $show_result = $show;

    if ($value == 'loginradius_basic_profile_data' || $value == 'loginradius_extended_profile_data') {
      $show_result = TRUE;
      $result = $profile_data;
    }
    else {
      $data_result = \Drupal\Core\Database\Database::getConnection()->query("SELECT * FROM {" . $value . "} WHERE user_id = :uid", array(':uid' => $user_id));
      $result = $data_result->fetchAll();
    }

    if (isset($result) && count($result) > 0) {
      $output .= '<h2>' . $key . '</h2>';
      $output .= socialprofiledata_show($result, $show_result);
    }
  }

  return $output;
}


/**
 * Save extended profile data into database.
 *
 * @param int $user_id
 * @param object $userprofile User Profile information
 */
function socialprofiledata_save($user_id, $userprofile) {  

  $sl_config = \Drupal::config('sociallogin.settings');
  $apiSecret = trim($sl_config->get('api_secret'));
  $apiKey = trim($sl_config->get('api_key'));
  $obj = new SocialLoginAPI($apiKey, $apiSecret, array(
          'output_format' => TRUE,
          'authentication' => FALSE
        ));
  $socialprofiledata_profile_selection = array();
    $config = \Drupal::config('socialprofiledata.settings');

  $data_array = $config->get('profile_selection');

  if (isset($data_array) && is_array($data_array)) {
    $socialprofiledata_profile_selection = explode(',', implode(',', $config->get('profile_selection')));
  }
  if (in_array('basic_profile_data', $socialprofiledata_profile_selection) && \Drupal\Core\Database\Database::getConnection()->schema()->tableExists('loginradius_basic_profile_data')) {
    $basic_profile_data_values = socialprofiledata_get_basic_profile($user_id, $userprofile);

    if (!\Drupal\Core\Database\Database::getConnection()->query('SELECT user_id FROM {loginradius_basic_profile_data} WHERE user_id = :id', array('id' => $user_id))->fetchField()) {
     socialprofiledata_insert('loginradius_basic_profile_data', $basic_profile_data_values);

      // Emails.
      if (\Drupal\Core\Database\Database::getConnection()->schema()->tableExists('loginradius_emails') && count($userprofile->Email) > 0) {
        try {
          $insert = \Drupal\Core\Database\Database::getConnection()->insert('loginradius_emails');
          foreach ($userprofile->Email as $lr_email) {
            $email_data_values = array(
              'user_id' => $user_id,
              'email_type' => (isset($lr_email->Type) ? $lr_email->Type : ''),
              'email' => (isset($lr_email->Value) ? $lr_email->Value : ''),
            );
            $insert->fields(array_keys($email_data_values));
            $insert->values($email_data_values);
          }
          $insert->execute();
        } catch (Exception $e) {
          watchdog_exception('type', $e);
        }
      }
    }
    else {
      socialprofiledata_update('loginradius_basic_profile_data', $user_id, $basic_profile_data_values);
    }
  }

  if (in_array('extended_location_data', $socialprofiledata_profile_selection) && \Drupal\Core\Database\Database::getConnection()->schema()->tableExists('loginradius_extended_location_data')) {
    $extended_location_data_values = socialprofiledata_get_extended_location($user_id, $userprofile);
    if (!\Drupal\Core\Database\Database::getConnection()->query('SELECT user_id FROM {loginradius_extended_location_data} WHERE user_id = :id', array('id' => $user_id))->fetchField()) {
     socialprofiledata_insert('loginradius_extended_location_data', $extended_location_data_values);
    }
    else {
      socialprofiledata_update('loginradius_extended_location_data', $user_id, $extended_location_data_values);
    }
  }

  // Insert extended profile data if option is selected.

  if (in_array('extended_profile_data', $socialprofiledata_profile_selection) && \Drupal\Core\Database\Database::getConnection()->schema()->tableExists('loginradius_extended_profile_data')) {
    $extended_profile_data_values = socialprofiledata_get_extended_profile($user_id, $userprofile);
     if (!\Drupal\Core\Database\Database::getConnection()->query('SELECT user_id FROM {loginradius_extended_profile_data} WHERE user_id = :id', array('id' => $user_id))->fetchField()) {
       socialprofiledata_insert('loginradius_extended_profile_data', $extended_profile_data_values);
    }
    else {  
      socialprofiledata_update('loginradius_extended_profile_data', $user_id, $extended_profile_data_values);
    }

    // Positions.
    if (!\Drupal\Core\Database\Database::getConnection()->query('SELECT user_id FROM {loginradius_positions} WHERE user_id = :id', array('id' => $user_id))->fetchField()) {
    if (!empty($userprofile->Positions) && count($userprofile->Positions) > 0) {
      foreach ($userprofile->Positions as $lr_position) {
        // Companies.
        if (isset($lr_position->Company) && \Drupal\Core\Database\Database::getConnection()->schema()->tableExists('loginradius_companies')) {
          $company_data_value = socialprofiledata_get_company($lr_position);
          //$temp_id = socialprofiledata_insert('loginradius_companies', $company_data_value);
         
        }
        // Positions.
        $positions_data_value = socialprofiledata_get_position($user_id, $lr_position, $company_data_value);
        socialprofiledata_insert('loginradius_positions', $positions_data_value);
      }
     }
    }
    $userprofile_extended_keys = array(
      'Educations' => 'loginradius_education',
      'PhoneNumbers' => 'loginradius_phone_numbers',
      'IMAccounts' => 'loginradius_IMaccounts',
      'Addresses' => 'loginradius_addresses',
      'Sports' => 'loginradius_sports',
      'InspirationalPeople' => 'loginradius_inspirational_people',
      'Skills' => 'loginradius_skills',
      'CurrentStatus' => 'loginradius_current_status',
      'Certifications' => 'loginradius_certifications',
      'Courses' => 'loginradius_courses',
      'Volunteer' => 'loginradius_volunteer',
      'RecommendationsReceived' => 'loginradius_recommendations_received',
      'Languages' => 'loginradius_languages',
      'Patents' => 'loginradius_patents',
      'FavoriteThings' => 'loginradius_favorites',
      'Games' => 'loginradius_games',
      'TeleVisionShow' => 'loginradius_television_show',
      'Books' => 'loginradius_books',
      'Movies' => 'loginradius_movies',
    );

    foreach ($userprofile_extended_keys as $key => $userprofile_data_table) {
      if (!empty($userprofile->$key) && count($userprofile->$key) > 0 && \Drupal\Core\Database\Database::getConnection()->schema()->tableExists($userprofile_data_table)) {
        socialprofiledata_save_premium_data($userprofile_data_table, $user_id, $userprofile->$key);
      }
    }
  }

  $lr_token = '';
  if (isset($userprofile->widget_token) && !empty($userprofile->widget_token)) {
    $lr_token = trim($userprofile->widget_token);
  }

  $provider_premium_data = array(
    'lr_contacts' => array(
      'twitter',
      'facebook',
      'linkedin',
      'google',
      'yahoo',
      'live',
    ),
    'facebook_profile_likes' => array('facebook'),
    'facebook_profile_events' => array('facebook'),
    'facebook_posts' => array('facebook'),
    'followed_companies_on' => array('facebook', 'linkedin'),
    'status_message' => array('twitter', 'facebook', 'linkedin'),
    'twitter_mentions' => array('twitter'),
    'lr_groups' => array('facebook', 'linkedin'),
  );
  foreach ($provider_premium_data as $key => $value) {
    if (in_array($userprofile->Provider, $value) && in_array($key, $socialprofiledata_profile_selection)) {
      socialprofiledata_save_premium_data_by_provider($obj, $lr_token, $user_id, $key, $userprofile->Provider);
    }
  }
}

function socialprofiledata_theme() {
  $path = drupal_get_path('module', 'socialprofiledata') . '/theme';
 return array(
      'show_profile' => array(
      'template' => 'show_profile',
      'variables' => array(
        'output' => NULL,
      ),
  
      'path' => $path,
    ),
    );
  }
  
function socialprofiledata_preprocess_views_view_table(&$variables) {
  global $base_url;  
//$variables['header']['lr_view']['content'] = 'View';
   $variables['#attached'] = array(
      'library' => array('socialprofiledata/drupal.dialog'),
      'drupalSettings' => array(
      'socialprofiledata' => array(
        'defaults' => 'width:960;height:auto;position:[center,60]',
        'selector' => 'content',
        'title' => '',
      ),
    ),
  );

$config = \Drupal::config('socialprofiledata.settings');
$show_profile = $config->get('show_profile');   
if($show_profile == '1'){
$variables['header']['lr_view'] = $variables['header']['name'];
$variables['header']['lr_view']['content'] = 'Profile Data';
for ($i=0; $i < count($variables['rows']); $i++) {
$user_link = (($variables['rows'][$i]['columns']['name']['content'][0]['field_output']['#markup'])); 
$a = new SimpleXMLElement($user_link);
$user = explode('user/', $a['href']); 
 
$variables['rows'][$i]['columns']['lr_view']['content'][0]['field_output']['#markup'] = '<a href="'.$base_url.'/socialprofiledata/ajax/userprofile/'.$user[1].'/" title="view extended user profile">View</a>';
}
}
}

/**
 * check data variable is array of object.
 *
 * @param $value
 * @return bool
 */
function socialprofiledata_check_array_and_object($value) {
  if (!is_array($value) && !is_object($value)) {
    return TRUE;
  }
  return FALSE;
}

/**
 * Update data using hook_user_update.
 *  
 * @param $account
 */
function socialprofiledata_user_update($account) {
  $config = \Drupal::config('sociallogin.settings');
  if ($config->get('update_user_profile') == 1) { 

    $userprofile = isset($_SESSION['spd_userprofile']) ? $_SESSION['spd_userprofile'] : '';       
    if(isset($_SESSION['spd_userprofile']) && $_SESSION['spd_userprofile'] != ''){
    unset($_SESSION['spd_userprofile']);
    socialprofiledata_save($account->id(),$userprofile);
    }
  }
}


